From c2b1af8456cafcc988915d5380278999bb33f9be Mon Sep 17 00:00:00 2001
From: ExactlyWb <frolov.da@phystech.edu>
Date: Mon, 25 Apr 2022 20:03:06 +0300
Subject: [PATCH] New ipa reorder

# This patch is truncated version of Martin Liska's patch.
# The original sources you may see on
# https://gcc.gnu.org/legacy-ml/gcc-patches/2019-09/msg01142.html 

---
 gcc/cgraph.c            |  2 ++
 gcc/cgraph.h            |  2 ++
 gcc/cgraphclones.c      |  1 +
 gcc/lto-cgraph.c        |  2 ++
 gcc/lto/lto-partition.c | 18 ------------------
 gcc/varasm.c            |  9 +++++++++
 6 files changed, 16 insertions(+), 18 deletions(-)

diff --git a/gcc/cgraph.c b/gcc/cgraph.c
index 3547db54d87..3898eda424f 100644
--- a/gcc/cgraph.c
+++ b/gcc/cgraph.c
@@ -2058,6 +2058,8 @@ cgraph_node::dump (FILE *f)
     }
   if (tp_first_run > 0)
     fprintf (f, " first_run:%i", tp_first_run);
+  if (text_sorted_order > 0)
+    fprintf (f, " text_sorted_order:%i", text_sorted_order);
   if (origin)
     fprintf (f, " nested in:%s", origin->asm_name ());
   if (gimple_has_body_p (decl))
diff --git a/gcc/cgraph.h b/gcc/cgraph.h
index 9a19d83fffb..06ed1dad323 100644
--- a/gcc/cgraph.h
+++ b/gcc/cgraph.h
@@ -1434,6 +1434,8 @@ public:
   unsigned int profile_id;
   /* Time profiler: first run of function.  */
   int tp_first_run;
+  /* Order in .text.sorted.* section.  */
+  int text_sorted_order;
 
   /* Set when decl is an abstract function pointed to by the
      ABSTRACT_DECL_ORIGIN of a reachable function.  */
diff --git a/gcc/cgraphclones.c b/gcc/cgraphclones.c
index 15f7e119d18..2494e65a12a 100644
--- a/gcc/cgraphclones.c
+++ b/gcc/cgraphclones.c
@@ -463,6 +463,7 @@ cgraph_node::create_clone (tree new_decl, profile_count prof_count,
   new_node->rtl = rtl;
   new_node->frequency = frequency;
   new_node->tp_first_run = tp_first_run;
+  new_node->text_sorted_order = text_sorted_order;
   new_node->tm_clone = tm_clone;
   new_node->icf_merged = icf_merged;
   new_node->merged_comdat = merged_comdat;
diff --git a/gcc/lto-cgraph.c b/gcc/lto-cgraph.c
index 4dfa2862be3..0ecbf330e92 100644
--- a/gcc/lto-cgraph.c
+++ b/gcc/lto-cgraph.c
@@ -505,6 +505,7 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,
     section = "";
 
   streamer_write_hwi_stream (ob->main_stream, node->tp_first_run);
+  streamer_write_hwi_stream (ob->main_stream, node->text_sorted_order);
 
   bp = bitpack_create (ob->main_stream);
   bp_pack_value (&bp, node->local.local, 1);
@@ -1277,6 +1278,7 @@ input_node (struct lto_file_decl_data *file_data,
 		    "node with uid %d", node->get_uid ());
 
   node->tp_first_run = streamer_read_uhwi (ib);
+  node->text_sorted_order = streamer_read_uhwi (ib);
 
   bp = streamer_read_bitpack (ib);
 
diff --git a/gcc/lto/lto-partition.c b/gcc/lto/lto-partition.c
index e4860c74624..8b2b8f62984 100644
--- a/gcc/lto/lto-partition.c
+++ b/gcc/lto/lto-partition.c
@@ -381,24 +381,6 @@ node_cmp (const void *pa, const void *pb)
   const struct cgraph_node *a = *(const struct cgraph_node * const *) pa;
   const struct cgraph_node *b = *(const struct cgraph_node * const *) pb;
 
-  /* Profile reorder flag enables function reordering based on first execution
-     of a function. All functions with profile are placed in ascending
-     order at the beginning.  */
-
-  if (flag_profile_reorder_functions)
-  {
-    /* Functions with time profile are sorted in ascending order.  */
-    if (a->tp_first_run && b->tp_first_run)
-      return a->tp_first_run != b->tp_first_run
-	? a->tp_first_run - b->tp_first_run
-        : a->order - b->order;
-
-    /* Functions with time profile are sorted before the functions
-       that do not have the profile.  */
-    if (a->tp_first_run || b->tp_first_run)
-      return b->tp_first_run - a->tp_first_run;
-  }
-
   return b->order - a->order;
 }
 
diff --git a/gcc/varasm.c b/gcc/varasm.c
index 7749be05b6f..73cc842ef4e 100644
--- a/gcc/varasm.c
+++ b/gcc/varasm.c
@@ -600,6 +600,15 @@ default_function_section (tree decl, enum node_frequency freq,
   if (exit && freq != NODE_FREQUENCY_UNLIKELY_EXECUTED)
     return get_named_text_section (decl, ".text.exit", NULL);
 
+  cgraph_node *node = cgraph_node::get (decl);
+  if (node->text_sorted_order > 0 && freq != NODE_FREQUENCY_UNLIKELY_EXECUTED)
+    {
+      char section_name[64];
+      sprintf (section_name, ".text.sorted.%010d",
+	       node->text_sorted_order);
+      return get_named_text_section (decl, section_name, NULL);
+    }
+
   /* Group cold functions together, similarly for hot code.  */
   switch (freq)
     {
-- 
2.25.1

